name: 3-hour Crypto Scanner

on:
  schedule:
    - cron: "0 */3 * * *"   # every 3 hours
  workflow_dispatch:        # manual run allowed

concurrency:
  group: crypto-scanner
  cancel-in-progress: false

jobs:
  run-scanner:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      # optional secrets (set these under repo Settings -> Secrets)
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      EMAIL_RECIPIENT: ${{ secrets.EMAIL_RECIPIENT }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      TOP_N: ${{ secrets.TOP_N }}
      API_RATE_LIMIT_SECONDS: "0.5"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies (if requirements.txt present)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # minimal fallback (adjust to your script's needs)
            pip install requests pandas ccxt python-dotenv python-telegram-bot
          fi

      - name: Debug: list files (confirm scanner exists)
        run: |
          echo "WORKDIR: $(pwd)"
          ls -la
          echo "Repo root listing above. Ensure scanner_github.py is present at repo root."

      - name: Run scanner_github.py (with retries & backoff)
        shell: bash
        run: |
          attempts=0
          max_attempts=3
          while [ $attempts -lt $max_attempts ]; do
            attempts=$((attempts+1))
            echo "Attempt $attempts / $max_attempts - running scanner_github.py"
            python scanner_github.py
            rc=$?
            if [ $rc -eq 0 ]; then
              echo "scanner_github.py finished successfully"
              break
            fi
            echo "scanner_github.py exited with code $rc"
            if [ $attempts -lt $max_attempts ]; then
              sleep_seconds=$((attempts * 10))
              echo "Sleeping $sleep_seconds seconds before retry..."
              sleep $sleep_seconds
            else
              echo "All attempts failed â€” exiting with $rc"
              exit $rc
            fi
          done

      - name: Upload scan results (CSV/JSON) if any
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: |
            results/*.csv
            results/*.json

      - name: Show results dir (post-run)
        if: always()
        run: |
          echo "Results dir contents (if created by script):"
          ls -la results || echo "No results directory found"
